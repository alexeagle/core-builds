{"version":3,"file":"debug_context.js","sourceRoot":"","sources":["../../../../../modules/@angular/core/src/linker/debug_context.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injector} from '../di';\nimport {isBlank, isPresent} from '../facade/lang';\nimport {RenderDebugInfo} from '../render/api';\n\nimport {DebugAppView} from './view';\nimport {ViewType} from './view_type';\nexport class StaticNodeDebugInfo {\n/**\n * @param {?} providerTokens\n * @param {?} componentToken\n * @param {?} refTokens\n */\nconstructor(\npublic providerTokens: any[],\npublic componentToken: any,\npublic refTokens: {[key: string]: any}) {}\n}\n\nfunction StaticNodeDebugInfo_tsickle_Closure_declarations() {\n/** @type {?} */\nStaticNodeDebugInfo.prototype.providerTokens;\n/** @type {?} */\nStaticNodeDebugInfo.prototype.componentToken;\n/** @type {?} */\nStaticNodeDebugInfo.prototype.refTokens;\n}\n\nexport class DebugContext implements RenderDebugInfo {\n/**\n * @param {?} _view\n * @param {?} _nodeIndex\n * @param {?} _tplRow\n * @param {?} _tplCol\n */\nconstructor(\nprivate _view: DebugAppView<any>,\nprivate _nodeIndex: number,\nprivate _tplRow: number,\nprivate _tplCol: number) {}\n/**\n * @return {?}\n */\nprivate get _staticNodeInfo(): StaticNodeDebugInfo {\n    return isPresent(this._nodeIndex) ? this._view.staticNodeDebugInfos[this._nodeIndex] : null;\n  }\n/**\n * @return {?}\n */\nget context() { return this._view.context; }\n/**\n * @return {?}\n */\nget component() {\n    const /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    if (isPresent(staticNodeInfo) && isPresent(staticNodeInfo.componentToken)) {\n      return this.injector.get(staticNodeInfo.componentToken);\n    }\n    return null;\n  }\n/**\n * @return {?}\n */\nget componentRenderElement() {\n    let /** @type {?} */ componentView = this._view;\n    while (isPresent(componentView.parentView) && componentView.type !== ViewType.COMPONENT) {\n      componentView = /** @type {?} */(( <DebugAppView<any>>componentView.parentView));\n    }\n    return componentView.parentElement;\n  }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._view.injector(this._nodeIndex); }\n/**\n * @return {?}\n */\nget renderNode(): any {\n    if (isPresent(this._nodeIndex) && this._view.allNodes) {\n      return this._view.allNodes[this._nodeIndex];\n    } else {\n      return null;\n    }\n  }\n/**\n * @return {?}\n */\nget providerTokens(): any[] {\n    const /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    return isPresent(staticNodeInfo) ? staticNodeInfo.providerTokens : null;\n  }\n/**\n * @return {?}\n */\nget source(): string {\n    return `${this._view.componentType.templateUrl}:${this._tplRow}:${this._tplCol}`;\n  }\n/**\n * @return {?}\n */\nget references(): {[key: string]: any} {\n    const /** @type {?} */ varValues: {[key: string]: string} = {};\n    const /** @type {?} */ staticNodeInfo = this._staticNodeInfo;\n    if (isPresent(staticNodeInfo)) {\n      const /** @type {?} */ refs = staticNodeInfo.refTokens;\n      Object.keys(refs).forEach(refName => {\n        const /** @type {?} */ refToken = refs[refName];\n        let /** @type {?} */ varValue: any;\n        if (isBlank(refToken)) {\n          varValue = this._view.allNodes ? this._view.allNodes[this._nodeIndex] : null;\n        } else {\n          varValue = this._view.injectorGet(refToken, this._nodeIndex, null);\n        }\n        varValues[refName] = varValue;\n      });\n    }\n    return varValues;\n  }\n}\n\nfunction DebugContext_tsickle_Closure_declarations() {\n/** @type {?} */\nDebugContext.prototype._view;\n/** @type {?} */\nDebugContext.prototype._nodeIndex;\n/** @type {?} */\nDebugContext.prototype._tplRow;\n/** @type {?} */\nDebugContext.prototype._tplCol;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}