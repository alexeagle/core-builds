{"version":3,"file":"application_ref.js","sourceRoot":"","sources":["../../../../modules/@angular/core/src/application_ref.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ErrorHandler} from '../src/error_handler';\nimport {ListWrapper} from '../src/facade/collection';\nimport {unimplemented} from '../src/facade/errors';\nimport {stringify} from '../src/facade/lang';\nimport {isPromise} from '../src/util/lang';\n\nimport {ApplicationInitStatus} from './application_init';\nimport {APP_BOOTSTRAP_LISTENER, PLATFORM_INITIALIZER} from './application_tokens';\nimport {ChangeDetectorRef} from './change_detection/change_detector_ref';\nimport {Console} from './console';\nimport {Injectable, Injector, OpaqueToken, Optional, Provider, ReflectiveInjector} from './di';\nimport {CompilerFactory, CompilerOptions} from './linker/compiler';\nimport {ComponentFactory, ComponentRef} from './linker/component_factory';\nimport {ComponentFactoryResolver} from './linker/component_factory_resolver';\nimport {NgModuleFactory, NgModuleInjector, NgModuleRef} from './linker/ng_module_factory';\nimport {AppView} from './linker/view';\nimport {ViewRef, ViewRef_} from './linker/view_ref';\nimport {WtfScopeFn, wtfCreateScope, wtfLeave} from './profile/profile';\nimport {Testability, TestabilityRegistry} from './testability/testability';\nimport {Type} from './type';\nimport {NgZone} from './zone/ng_zone';\n\nlet /** @type {?} */ _devMode: boolean = true;\nlet /** @type {?} */ _runModeLocked: boolean = false;\nlet /** @type {?} */ _platform: PlatformRef;\n/**\n * Disable Angular's development mode, which turns off assertions and other\n * checks within the framework.\n * \n * One important assertion this disables verifies that a change detection pass\n * does not result in additional changes to any bindings (also known as\n * unidirectional data flow).\n * \n * \\@stable\n * @return {?}\n */\nexport function enableProdMode(): void {\n  if (_runModeLocked) {\n    throw new Error('Cannot enable prod mode after platform setup.');\n  }\n  _devMode = false;\n}\n/**\n * Returns whether Angular is in development mode. After called once,\n * the value is locked and won't change any more.\n * \n * By default, this is true, unless a user calls `enableProdMode` before calling this.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function isDevMode(): boolean {\n  _runModeLocked = true;\n  return _devMode;\n}\n/**\n * A token for third-party components that can register themselves with NgProbe.\n * \n * \\@experimental\n */\nexport class NgProbeToken {\n/**\n * @param {?} name\n * @param {?} token\n */\nconstructor(public name: string,\npublic token: any) {}\n}\n\nfunction NgProbeToken_tsickle_Closure_declarations() {\n/** @type {?} */\nNgProbeToken.prototype.name;\n/** @type {?} */\nNgProbeToken.prototype.token;\n}\n\n/**\n * Creates a platform.\n * Platforms have to be eagerly created via this function.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} injector\n * @return {?}\n */\nexport function createPlatform(injector: Injector): PlatformRef {\n  if (_platform && !_platform.destroyed) {\n    throw new Error(\n        'There can be only one platform. Destroy the previous one to create a new one.');\n  }\n  _platform = injector.get(PlatformRef);\n  const /** @type {?} */ inits: Function[] = /** @type {?} */(( <Function[]>injector.get(PLATFORM_INITIALIZER, null)));\n  if (inits) inits.forEach(init => init());\n  return _platform;\n}\n/**\n * Creates a factory for a platform\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} parentPlatformFactory\n * @param {?} name\n * @param {?=} providers\n * @return {?}\n */\nexport function createPlatformFactory(\n    parentPlatformFactory: (extraProviders?: Provider[]) => PlatformRef, name: string,\n    providers: Provider[] = []): (extraProviders?: Provider[]) => PlatformRef {\n  const /** @type {?} */ marker = new OpaqueToken(`Platform: ${name}`);\n  return (extraProviders: Provider[] = []) => {\n    if (!getPlatform()) {\n      if (parentPlatformFactory) {\n        parentPlatformFactory(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true}));\n      } else {\n        createPlatform(ReflectiveInjector.resolveAndCreate(\n            providers.concat(extraProviders).concat({provide: marker, useValue: true})));\n      }\n    }\n    return assertPlatform(marker);\n  };\n}\n/**\n * Checks that there currently is a platform\n * which contains the given token as a provider.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} requiredToken\n * @return {?}\n */\nexport function assertPlatform(requiredToken: any): PlatformRef {\n  const /** @type {?} */ platform = getPlatform();\n\n  if (!platform) {\n    throw new Error('No platform exists!');\n  }\n\n  if (!platform.injector.get(requiredToken, null)) {\n    throw new Error(\n        'A platform with a different configuration has been created. Please destroy it first.');\n  }\n\n  return platform;\n}\n/**\n * Destroy the existing platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function destroyPlatform(): void {\n  if (_platform && !_platform.destroyed) {\n    _platform.destroy();\n  }\n}\n/**\n * Returns the current platform.\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @return {?}\n */\nexport function getPlatform(): PlatformRef {\n  return _platform && !_platform.destroyed ? _platform : null;\n}\n/**\n * The Angular platform is the entry point for Angular on a web page. Each page\n * has exactly one platform, and services (such as reflection) which are common\n * to every Angular application running on the page are bound in its scope.\n * \n * A page's platform is initialized implicitly when {\\@link bootstrap}() is called, or\n * explicitly by calling {\\@link createPlatform}().\n * \n * \\@stable\n * @abstract\n */\nexport abstract class PlatformRef {\n/**\n * Creates an instance of an `\\@NgModule` for the given platform\n * for offline compilation.\n * \n * ## Simple Example\n * \n * ```typescript\n * my_module.ts:\n * \n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * main.ts:\n * import {MyModuleNgFactory} from './my_module.ngfactory';\n * import {platformBrowser} from '\\@angular/platform-browser';\n * \n * let moduleRef = platformBrowser().bootstrapModuleFactory(MyModuleNgFactory);\n * ```\n * \n * \\@experimental APIs related to application bootstrap are currently under review.\n * @param {?} moduleFactory\n * @return {?}\n */\nbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>> {\n    throw unimplemented();\n  }\n/**\n * Creates an instance of an `\\@NgModule` for a given platform using the given runtime compiler.\n * \n * ## Simple Example\n * \n * ```typescript\n * \\@NgModule({ \n *   imports: [BrowserModule]\n * })\n * class MyModule {}\n * \n * let moduleRef = platformBrowser().bootstrapModule(MyModule);\n * ```\n * \\@stable\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nbootstrapModule<M>(moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = []):\n      Promise<NgModuleRef<M>> {\n    throw unimplemented();\n  }\n/**\n * Register a listener to be called when the platform is disposed.\n * @abstract\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void) {}\n/**\n * Retrieve the platform {\\@link Injector}, which is the parent injector for\n * every Angular application on the page and provides singleton providers.\n * @return {?}\n */\nget injector(): Injector { throw unimplemented(); };\n/**\n * Destroy the Angular platform and all Angular applications on the page.\n * @abstract\n * @return {?}\n */\ndestroy() {}\n/**\n * @return {?}\n */\nget destroyed(): boolean { throw unimplemented(); }\n}\n/**\n * @param {?} errorHandler\n * @param {?} callback\n * @return {?}\n */\nfunction _callAndReportToErrorHandler(errorHandler: ErrorHandler, callback: () => any): any {\n  try {\n    const /** @type {?} */ result = callback();\n    if (isPromise(result)) {\n      return result.catch((e: any) => {\n        errorHandler.handleError(e);\n        // rethrow as the exception handler might not do it\n        throw e;\n      });\n    }\n\n    return result;\n  } catch ( /** @type {?} */e) {\n    errorHandler.handleError(e);\n    // rethrow as the exception handler might not do it\n    throw e;\n  }\n}\nexport class PlatformRef_ extends PlatformRef {\nprivate _modules: NgModuleRef<any>[] = [];\nprivate _destroyListeners: Function[] = [];\nprivate _destroyed: boolean = false;\n/**\n * @param {?} _injector\n */\nconstructor(private _injector: Injector) { super(); }\n/**\n * @param {?} callback\n * @return {?}\n */\nonDestroy(callback: () => void): void { this._destroyListeners.push(callback); }\n/**\n * @return {?}\n */\nget injector(): Injector { return this._injector; }\n/**\n * @return {?}\n */\nget destroyed() { return this._destroyed; }\n/**\n * @return {?}\n */\ndestroy() {\n    if (this._destroyed) {\n      throw new Error('The platform has already been destroyed!');\n    }\n    this._modules.slice().forEach(module => module.destroy());\n    this._destroyListeners.forEach(listener => listener());\n    this._destroyed = true;\n  }\n/**\n * @param {?} moduleFactory\n * @return {?}\n */\nbootstrapModuleFactory<M>(moduleFactory: NgModuleFactory<M>): Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleFactoryWithZone(moduleFactory, null);\n  }\n/**\n * @param {?} moduleFactory\n * @param {?} ngZone\n * @return {?}\n */\nprivate _bootstrapModuleFactoryWithZone<M>(moduleFactory: NgModuleFactory<M>, ngZone: NgZone):\n      Promise<NgModuleRef<M>> {\n    // Note: We need to create the NgZone _before_ we instantiate the module,\n    // as instantiating the module creates some providers eagerly.\n    // So we create a mini parent injector that just contains the new NgZone and\n    // pass that as parent to the NgModuleFactory.\n    if (!ngZone) ngZone = new NgZone({enableLongStackTrace: isDevMode()});\n    // Attention: Don't use ApplicationRef.run here,\n    // as we want to be sure that all possible constructor calls are inside `ngZone.run`!\n    return ngZone.run(() => {\n      const /** @type {?} */ ngZoneInjector =\n          ReflectiveInjector.resolveAndCreate([{provide: NgZone, useValue: ngZone}], this.injector);\n      const /** @type {?} */ moduleRef = /** @type {?} */(( <NgModuleInjector<M>>moduleFactory.create(ngZoneInjector)));\n      const /** @type {?} */ exceptionHandler: ErrorHandler = moduleRef.injector.get(ErrorHandler, null);\n      if (!exceptionHandler) {\n        throw new Error('No ErrorHandler. Is platform module (BrowserModule) included?');\n      }\n      moduleRef.onDestroy(() => ListWrapper.remove(this._modules, moduleRef));\n      ngZone.onError.subscribe({next: (error: any) => { exceptionHandler.handleError(error); }});\n      return _callAndReportToErrorHandler(exceptionHandler, () => {\n        const /** @type {?} */ initStatus: ApplicationInitStatus = moduleRef.injector.get(ApplicationInitStatus);\n        return initStatus.donePromise.then(() => {\n          this._moduleDoBootstrap(moduleRef);\n          return moduleRef;\n        });\n      });\n    });\n  }\n/**\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @return {?}\n */\nbootstrapModule<M>(moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = []):\n      Promise<NgModuleRef<M>> {\n    return this._bootstrapModuleWithZone(moduleType, compilerOptions, null);\n  }\n/**\n * @param {?} moduleType\n * @param {?=} compilerOptions\n * @param {?} ngZone\n * @param {?=} componentFactoryCallback\n * @return {?}\n */\nprivate _bootstrapModuleWithZone<M>(\n      moduleType: Type<M>, compilerOptions: CompilerOptions|CompilerOptions[] = [], ngZone: NgZone,\n      componentFactoryCallback?: any): Promise<NgModuleRef<M>> {\n    const /** @type {?} */ compilerFactory: CompilerFactory = this.injector.get(CompilerFactory);\n    const /** @type {?} */ compiler = compilerFactory.createCompiler(\n        Array.isArray(compilerOptions) ? compilerOptions : [compilerOptions]);\n\n    // ugly internal api hack: generate host component factories for all declared components and\n    // pass the factories into the callback - this is used by UpdateAdapter to get hold of all\n    // factories.\n    if (componentFactoryCallback) {\n      return compiler.compileModuleAndAllComponentsAsync(moduleType)\n          .then(({ngModuleFactory, componentFactories}) => {\n            componentFactoryCallback(componentFactories);\n            return this._bootstrapModuleFactoryWithZone(ngModuleFactory, ngZone);\n          });\n    }\n\n    return compiler.compileModuleAsync(moduleType)\n        .then((moduleFactory) => this._bootstrapModuleFactoryWithZone(moduleFactory, ngZone));\n  }\n/**\n * @param {?} moduleRef\n * @return {?}\n */\nprivate _moduleDoBootstrap(moduleRef: NgModuleInjector<any>) {\n    const /** @type {?} */ appRef = moduleRef.injector.get(ApplicationRef);\n    if (moduleRef.bootstrapFactories.length > 0) {\n      moduleRef.bootstrapFactories.forEach((compFactory) => appRef.bootstrap(compFactory));\n    } else if (moduleRef.instance.ngDoBootstrap) {\n      moduleRef.instance.ngDoBootstrap(appRef);\n    } else {\n      throw new Error(\n          `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare \"@NgModule.bootstrap\" components nor a \"ngDoBootstrap\" method. ` +\n          `Please define one of these.`);\n    }\n  }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: Injector, },\n];\n}\n\nfunction PlatformRef__tsickle_Closure_declarations() {\n/** @type {?} */\nPlatformRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nPlatformRef_.ctorParameters;\n/** @type {?} */\nPlatformRef_.prototype._modules;\n/** @type {?} */\nPlatformRef_.prototype._destroyListeners;\n/** @type {?} */\nPlatformRef_.prototype._destroyed;\n/** @type {?} */\nPlatformRef_.prototype._injector;\n}\n\n/**\n * A reference to an Angular application running on a page.\n * \n * For more about Angular applications, see the documentation for {\\@link bootstrap}.\n * \n * \\@stable\n * @abstract\n */\nexport abstract class ApplicationRef {\n/**\n * Bootstrap a new component at the root level of the application.\n * \n * ### Bootstrap process\n * \n * When bootstrapping a new root component into an application, Angular mounts the\n * specified application component onto DOM elements identified by the [componentType]'s\n * selector and kicks off automatic change detection to finish initializing the component.\n * \n * ### Example\n * {\\@example core/ts/platform/platform.ts region='longform'}\n * @abstract\n * @param {?} componentFactory\n * @return {?}\n */\nbootstrap<C>(componentFactory: ComponentFactory<C>|Type<C>) {}\n/**\n * Invoke this method to explicitly process change detection and its side-effects.\n * \n * In development mode, `tick()` also performs a second change detection cycle to ensure that no\n * further changes are detected. If additional changes are picked up during this second cycle,\n * bindings in the app have side-effects that cannot be resolved in a single change detection\n * pass.\n * In this case, Angular throws an error, since an Angular application can only have one change\n * detection pass during which all change detection must complete.\n * @abstract\n * @return {?}\n */\ntick() {}\n/**\n * Get a list of component types registered to this application.\n * This list is populated even before the component is created.\n * @return {?}\n */\nget componentTypes(): Type<any>[] { return /** @type {?} */(( <Type<any>[]>unimplemented())); };\n/**\n * Get a list of components registered to this application.\n * @return {?}\n */\nget components(): ComponentRef<any>[] { return /** @type {?} */(( <ComponentRef<any>[]>unimplemented())); };\n/**\n * Attaches a view so that it will be dirty checked.\n * The view will be automatically detached when it is destroyed.\n * This will throw if the view is already attached to a ViewContainer.\n * @param {?} view\n * @return {?}\n */\nattachView(view: ViewRef): void { unimplemented(); }\n/**\n * Detaches a view from dirty checking again.\n * @param {?} view\n * @return {?}\n */\ndetachView(view: ViewRef): void { unimplemented(); }\n/**\n * Returns the number of attached views.\n * @return {?}\n */\nget viewCount() { return unimplemented(); }\n}\nexport class ApplicationRef_ extends ApplicationRef {\n  /** @internal */\n  static _tickScope: WtfScopeFn = wtfCreateScope('ApplicationRef#tick()');\nprivate _bootstrapListeners: Function[] = [];\nprivate _rootComponents: ComponentRef<any>[] = [];\nprivate _rootComponentTypes: Type<any>[] = [];\nprivate _views: AppView<any>[] = [];\nprivate _runningTick: boolean = false;\nprivate _enforceNoNewChanges: boolean = false;\n/**\n * @param {?} _zone\n * @param {?} _console\n * @param {?} _injector\n * @param {?} _exceptionHandler\n * @param {?} _componentFactoryResolver\n * @param {?} _initStatus\n * @param {?} _testabilityRegistry\n * @param {?} _testability\n */\nconstructor(\nprivate _zone: NgZone,\nprivate _console: Console,\nprivate _injector: Injector,\nprivate _exceptionHandler: ErrorHandler,\nprivate _componentFactoryResolver: ComponentFactoryResolver,\nprivate _initStatus: ApplicationInitStatus,\nprivate _testabilityRegistry: TestabilityRegistry,\nprivate _testability: Testability) {\n    super();\n    this._enforceNoNewChanges = isDevMode();\n\n    this._zone.onMicrotaskEmpty.subscribe(\n        {next: () => { this._zone.run(() => { this.tick(); }); }});\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\nattachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as ViewRef_<any>))).internalView;\n    this._views.push(view);\n    view.attachToAppRef(this);\n  }\n/**\n * @param {?} viewRef\n * @return {?}\n */\ndetachView(viewRef: ViewRef): void {\n    const /** @type {?} */ view = ( /** @type {?} */((viewRef as ViewRef_<any>))).internalView;\n    ListWrapper.remove(this._views, view);\n    view.detach();\n  }\n/**\n * @param {?} componentOrFactory\n * @return {?}\n */\nbootstrap<C>(componentOrFactory: ComponentFactory<C>|Type<C>): ComponentRef<C> {\n    if (!this._initStatus.done) {\n      throw new Error(\n          'Cannot bootstrap as there are still asynchronous initializers running. Bootstrap components in the `ngDoBootstrap` method of the root module.');\n    }\n    let /** @type {?} */ componentFactory: ComponentFactory<C>;\n    if (componentOrFactory instanceof ComponentFactory) {\n      componentFactory = componentOrFactory;\n    } else {\n      componentFactory = this._componentFactoryResolver.resolveComponentFactory(componentOrFactory);\n    }\n    this._rootComponentTypes.push(componentFactory.componentType);\n    const /** @type {?} */ compRef = componentFactory.create(this._injector, [], componentFactory.selector);\n    compRef.onDestroy(() => { this._unloadComponent(compRef); });\n    const /** @type {?} */ testability = compRef.injector.get(Testability, null);\n    if (testability) {\n      compRef.injector.get(TestabilityRegistry)\n          .registerApplication(compRef.location.nativeElement, testability);\n    }\n\n    this._loadComponent(compRef);\n    if (isDevMode()) {\n      this._console.log(\n          `Angular is running in the development mode. Call enableProdMode() to enable the production mode.`);\n    }\n    return compRef;\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _loadComponent(componentRef: ComponentRef<any>): void {\n    this.attachView(componentRef.hostView);\n    this.tick();\n    this._rootComponents.push(componentRef);\n    // Get the listeners lazily to prevent DI cycles.\n    const /** @type {?} */ listeners = /** @type {?} */((\n        <((compRef: ComponentRef<any>) => void)[]>this._injector.get(APP_BOOTSTRAP_LISTENER, [])\n            .concat(this._bootstrapListeners)));\n    listeners.forEach((listener) => listener(componentRef));\n  }\n/**\n * @param {?} componentRef\n * @return {?}\n */\nprivate _unloadComponent(componentRef: ComponentRef<any>): void {\n    this.detachView(componentRef.hostView);\n    ListWrapper.remove(this._rootComponents, componentRef);\n  }\n/**\n * @return {?}\n */\ntick(): void {\n    if (this._runningTick) {\n      throw new Error('ApplicationRef.tick is called recursively');\n    }\n\n    const /** @type {?} */ scope = ApplicationRef_._tickScope();\n    try {\n      this._runningTick = true;\n      this._views.forEach((view) => view.ref.detectChanges());\n      if (this._enforceNoNewChanges) {\n        this._views.forEach((view) => view.ref.checkNoChanges());\n      }\n    } finally {\n      this._runningTick = false;\n      wtfLeave(scope);\n    }\n  }\n/**\n * @return {?}\n */\nngOnDestroy() {\n    // TODO(alxhub): Dispose of the NgZone.\n    this._views.slice().forEach((view) => view.destroy());\n  }\n/**\n * @return {?}\n */\nget viewCount() { return this._views.length; }\n/**\n * @return {?}\n */\nget componentTypes(): Type<any>[] { return this._rootComponentTypes; }\n/**\n * @return {?}\n */\nget components(): ComponentRef<any>[] { return this._rootComponents; }\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: NgZone, },\n{type: Console, },\n{type: Injector, },\n{type: ErrorHandler, },\n{type: ComponentFactoryResolver, },\n{type: ApplicationInitStatus, },\n{type: TestabilityRegistry, decorators: [{ type: Optional }, ]},\n{type: Testability, decorators: [{ type: Optional }, ]},\n];\n}\n\nfunction ApplicationRef__tsickle_Closure_declarations() {\n/**\n * \\@internal\n * @type {?}\n */\nApplicationRef_._tickScope;\n/** @type {?} */\nApplicationRef_.decorators;\n/**\n * @nocollapse\n * @type {?}\n */\nApplicationRef_.ctorParameters;\n/** @type {?} */\nApplicationRef_.prototype._bootstrapListeners;\n/** @type {?} */\nApplicationRef_.prototype._rootComponents;\n/** @type {?} */\nApplicationRef_.prototype._rootComponentTypes;\n/** @type {?} */\nApplicationRef_.prototype._views;\n/** @type {?} */\nApplicationRef_.prototype._runningTick;\n/** @type {?} */\nApplicationRef_.prototype._enforceNoNewChanges;\n/** @type {?} */\nApplicationRef_.prototype._zone;\n/** @type {?} */\nApplicationRef_.prototype._console;\n/** @type {?} */\nApplicationRef_.prototype._injector;\n/** @type {?} */\nApplicationRef_.prototype._exceptionHandler;\n/** @type {?} */\nApplicationRef_.prototype._componentFactoryResolver;\n/** @type {?} */\nApplicationRef_.prototype._initStatus;\n/** @type {?} */\nApplicationRef_.prototype._testabilityRegistry;\n/** @type {?} */\nApplicationRef_.prototype._testability;\n}\n\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}